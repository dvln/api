// Copyright Â© 2015 Erik Brady <brady@dvln.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package api

import (
	"bytes"
	"encoding/json"
	"fmt"
	"runtime"
	"strings"
	"testing"
)

var jsonSample = []byte(`{ "apiVersion": "0.1", "id": -1, "error": { "message": "Please use a valid subcommand (for a list: 'dvln help')", "code": 2001, "level": "ISSUE" } }`)

func logErr(t *testing.T, found, expected string) {
	out := new(bytes.Buffer)

	_, _, line, ok := runtime.Caller(2)
	if ok {
		fmt.Fprintf(out, "Line: %d ", line)
	}
	fmt.Fprintf(out, "Unexpected response.\nExpecting to contain: \n %q\nGot:\n %q\n", expected, found)
	t.Errorf(out.String())
}

func checkResultContains(t *testing.T, result string, check string) {
	if !strings.Contains(result, check) {
		logErr(t, result, check)
	}
}

func checkResultOmits(t *testing.T, result string, check string) {
	if strings.Contains(result, check) {
		logErr(t, result, check)
	}
}

// TestJSONIndentLevel to see if indent level set/get functions
func TestJSONIndentLevel(t *testing.T) {
	level := JSONIndentLevel()
	if level != 2 {
		t.Errorf("JSON default indent level was not 2 as expected, found: %d\n", level)
	}
	SetJSONIndentLevel(4)
	level = JSONIndentLevel()
	if level != 4 {
		t.Errorf("JSON indent level was set to 4 but not found as 4, found: %d\n", level)
	}
	SetJSONIndentLevel(2)
}

// TestJSONPrefix to see if JSON prefix text set/get functions ok
func TestJSONPrefix(t *testing.T) {
	prefix := JSONPrefix()
	if prefix != "" {
		t.Errorf("JSON default prefix was not \"\" as expected, found: \"%s\"\n", prefix)
	}
	SetJSONPrefix("  ")
	prefix = JSONPrefix()
	if prefix != "  " {
		t.Errorf("JSON prefix was just set to \"  \" but when checking it, found: \"%s\"\n", prefix)
	}
	SetJSONPrefix("")
}

// TestJSONRaw to see if JSON raw or formatted output mode "setup" works...
func TestJSONRaw(t *testing.T) {
	raw := JSONRaw()
	if raw != false {
		t.Errorf("JSON \"raw\" output default was not \"false\" as expected, found: %v\n", raw)
	}
	SetJSONRaw(true)
	raw = JSONRaw()
	if raw != true {
		t.Errorf("JSON \"raw\" was set to true but just found it currently set to \"%v\"\n", raw)
	}
	SetJSONRaw(false)
}

// TestPrettyJSON to see if it does beautify some "raw" JSON
func TestPrettyJSON(t *testing.T) {
	results, err := PrettyJSON(jsonSample)
	if err != nil {
		t.Errorf("Properly formatted JSON failed to be made pretty: %s", jsonSample)
	}
	checkResultContains(t, results, "  \"error\": {")
	checkResultContains(t, results, "    \"message\": ")
}

// TestEscapeJSONString to see if things like carriage return are escaped...
func TestEscapeJSONString(t *testing.T) {
	multiLineSample := []byte("This is a test\nthis is only a test\n")
	results := EscapeJSONString(multiLineSample)
	checkResultContains(t, string(results), ` test\u000athis `)
}

// TestFatalJSONMsg to see if it correctly builds a JSON fatal message string
func TestFatalJSONMsg(t *testing.T) {
	fatalErr := Msg{
		Message: "This is a multiline\nfatal message\n",
		Code: 2121,
		Level: "FATAL",
	}
	apiVer := "0.1"
	output := FatalJSONMsg(apiVer, fatalErr)
	checkResultContains(t, output, `  "apiVersion": "0.1"`)
	checkResultContains(t, output, `  "error": {`)
	checkResultContains(t, output, `    "message": "This is a multiline\u000afatal `)
	checkResultContains(t, output, `    "code": 2121,`)

	// Now lets see if the JSON returned was good
	var result interface{}
	err := json.Unmarshal([]byte(output), &result)
	if err != nil {
		t.Fatalf("Unable to unmarshal JSON generated by FatalJSONMsg(), error: %s\n", err)
	}
}

// TestGetJSONOutput to see if it correctly builds a complete JSON response
func TestGetJSONOutput(t *testing.T) {
	fatalErr := NewMsg("This is a fatal error\n", 2121, "FATAL")
	warnErr := Msg{
		Message: "This is a warning message\n",
		Code: 2122,
		Level: "WARNING",
	}
	noteMsg := NewMsg("This is a note\n", 0, "INFO")
	apiVer := "0.1"
	SetStoredNonFatalWarning(warnErr)
	SetStoredNote(noteMsg)
	items := []interface{}{"one", "two", "three"}
	output, fatal := GetJSONOutput(apiVer, "dvlnTest", "test", "verbose", nil, items)
	if fatal {
		t.Fatalf("GetJSONOutput on warn/note indicated fatal, shouldn't have.  Output:\n%s", output)
	}

	checkResultContains(t, output, `  "apiVersion": "0.1"`)
	checkResultContains(t, output, `  "context": "dvlnTest",`)
	checkResultContains(t, output, `  "id": 0`)
	checkResultContains(t, output, `  "note": {`)
	checkResultContains(t, output, `    "message": "This is a note`)
	checkResultContains(t, output, `  "warning": {`)
	checkResultContains(t, output, `    "message": "This is a warning message\n`)
	checkResultContains(t, output, `    "code": 2122,`)
	checkResultContains(t, output, `    "currentItemCount": 3,`)
	checkResultContains(t, output, `    "items": [`)
	checkResultContains(t, output, `      "one",`)

	// Now lets see if the JSON returned was good
	var result interface{}
	err := json.Unmarshal([]byte(output), &result)
	if err != nil {
		t.Fatalf("Unable to unmarshal JSON generated by GetJSONOutput(), error: %s\n", err)
	}

	SetStoredFatalError(fatalErr)
	output, fatal = GetJSONOutput(apiVer, "dvlnTest", "test", "verbose", nil, nil)
	if !fatal {
		t.Fatalf("GetJSONOutput had a fatal but return wasn't false as expected, output:\n%s", output)
	}

	// Now lets see if the JSON returned was good
	err = json.Unmarshal([]byte(output), &result)
	if err != nil {
		t.Fatalf("Unable to unmarshal fatal JSON generated by GetJSONOutput(), error: %s\n", err)
	}
}

